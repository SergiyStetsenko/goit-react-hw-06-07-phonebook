{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-reducer.js","redux/store.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/App/App.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","data","dispatch","contact","name","number","post","then","catch","error","contactId","delete","a","get","getFilter","state","contacts","filter","getAllContacts","items","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","createReducer","payload","id","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","connect","value","contactsSelectors","onChange","e","currentTarget","type","ContactForm","handleChange","setState","handleSubmit","preventDefault","props","find","alert","onSubmit","this","pattern","title","required","nameInputId","numberInputId","Component","contactsOperations","onDeleteContact","map","onClick","App","fetchContacts","isLoadingContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.481f3d03.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactsRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactsSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n","import axios from \"axios\";\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from \"./contacts-actions\";\n\naxios.defaults.baseURL = \"http://localhost:4040/\";\n\nconst fetchContacts = () => async (dispatch) => {\n  dispatch(fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get(\"/contacts\");\n\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  }\n};\n\nconst addContact = (data) => (dispatch) => {\n  const contact = {\n    name: data.name,\n    number: data.number,\n  };\n\n  dispatch(addContactRequest());\n\n  axios\n    .post(\"/contacts\", contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch((error) => dispatch(addContactError(error)));\n};\n\nconst deleteContact = (contactId) => (dispatch) => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(deleteContactSuccess(contactId)))\n    .catch((error) => dispatch(deleteContactError(error)));\n};\n\nexport default {\n  addContact,\n  deleteContact,\n  fetchContacts,\n};\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getLoading = (state) => state.contacts.loading;\n\nconst getFilter = (state) => state.contacts.filter;\n\nconst getAllContacts = (state) => state.contacts.items;\n\nexport const getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n\nexport default {\n  getLoading,\n  getFilter,\n  getAllContacts,\n  getVisibleContacts,\n};\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  changeFilter,\n} from \"./contacts-actions\";\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (state, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n});\n\nconst filter = createReducer(\"\", {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst error = createReducer(null, {});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n  error,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\n\nimport { contactsReducer } from './contacts';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n\n\nexport default store;\n","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { contactsSelectors, changeFilter } from \"../../redux/contacts\";\n\nexport const Filter = ({ value, onChange }) => {\n  return (\n    <label>\n      Find contacts by name :\n      <br />\n      <input type=\"text\" value={value} onChange={onChange} />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (e) => dispatch(changeFilter(e.currentTarget.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { contactsOperations } from \"../../redux/contacts\";\n\nexport class ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const { name } = this.state;\n    const { items } = this.props.state.contacts;\n\n    if (items.find((contact) => contact.name.toLowerCase() === name)) {\n      alert(\"Этот контакт уже добавлен\");\n    } else {\n      this.props.onSubmit(this.state);\n\n      this.setState({\n        name: \"\",\n        number: \"\",\n      });\n    }\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleChange}\n            id={this.nameInputId}\n          />\n        </label>\n        <br />\n        <label>\n          Number\n          <input\n            type=\"text\"\n            name=\"number\"\n            required\n            value={this.state.number}\n            onChange={this.handleChange}\n            id={this.numberInputId}\n          />\n        </label>\n        <br />\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  state,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: (data) => dispatch(contactsOperations.addContact(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { contactsSelectors, contactsOperations } from \"../../redux/contacts\";\n\nexport const ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ol>\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <li key={id}>\n            {name}: {number}\n            <button onClick={() => onDeleteContact(id)}>Delete</button>\n          </li>\n        );\n      })}\n    </ol>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDeleteContact: (id) => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Filter from \"../Filter/Filter\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\nimport ContactList from \"../ContactList/ContactList\";\n\nexport class App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        {this.props.isLoadingContacts && <h2>Загрузка...</h2>}\n        <Filter />\n        <ContactList />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store'\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}